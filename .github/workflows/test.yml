on:
  push:
    branches:
      - main
      - staging
      - trying
  pull_request:
  schedule: [cron: "45 6 * * *"]

name: Run tests
jobs:
  # The `ci-result` job doesn't actually test anything - it just aggregates the
  # overall build status for bors, otherwise our bors.toml would need an entry
  # for each individual job produced by the job-matrix.
  #
  # Ref: https://github.com/rust-lang/crater/blob/9ab6f9697c901c4a44025cf0a39b73ad5b37d198/.github/workflows/bors.yml#L125-L149
  #
  # ALL THE SUBSEQUENT JOBS NEED THEIR `name` ADDED TO THE `needs` SECTION OF THIS JOB!
  ci-result:
    name: ci result
    runs-on: ubuntu-latest
    needs:
      - lint
      - geo_types
      - geo
      - geo_postgis
      - geo_fuzz
      - bench
    steps:
      - name: Mark the job as a success
        if: success()
        run: exit 0
      - name: Mark the job as a failure
        if: "!success()"
        run: exit 1

  lint:
    name: lint
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        container_image:
          # Use the latest stable version. No need for older versions.
          - "georust/geo-ci:rust-1.59"
    container:
      image: ${{ matrix.container_image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - run: rustup component add rustfmt clippy
      - run: cargo fmt --all -- --check
      - run: cargo clippy --all-features --all-targets -- -Dwarnings

  geo_types:
    name: geo-types
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    defaults:
      run:
        working-directory: geo-types
    strategy:
      matrix:
        container_image:
          # We aim to support rust-stable plus (at least) the prior 3 releases,
          # giving us about 6 months of coverage.
          #
          # Minimum supported rust version (MSRV)
          - "georust/geo-ci:rust-1.56"
          # Two most recent releases - we omit older ones for expedient CI
          - "georust/geo-ci:rust-1.58"
          - "georust/geo-ci:rust-1.59"
    container:
      image: ${{ matrix.container_image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - run: cargo check --all-targets --no-default-features
      - run: cargo test --all-features

  geo:
    name: geo
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    defaults:
      run:
        working-directory: geo
    strategy:
      matrix:
        container_image:
          # We aim to support rust-stable plus (at least) the prior 3 releases,
          # giving us about 6 months of coverage.
          #
          # Minimum supported rust version (MSRV)
          - "georust/geo-ci:rust-1.56"
          # Two most recent releases - we omit older ones for expedient CI
          - "georust/geo-ci:rust-1.58"
          - "georust/geo-ci:rust-1.59"
    container:
      image: ${{ matrix.container_image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - run: cargo check --all-targets --no-default-features
      # we don't want to test `proj-network` because it only enables the `proj` feature
      - run: cargo test --features "use-proj use-serde"

  geo_postgis:
    name: geo-postgis
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    defaults:
      run:
        working-directory: geo-postgis
    strategy:
      matrix:
        container_image:
          # We aim to support rust-stable plus (at least) the prior 3 releases,
          # giving us about 6 months of coverage.
          #
          # Minimum supported rust version (MSRV)
          - "georust/geo-ci:rust-1.56"
          # Two most recent releases - we omit older ones for expedient CI
          - "georust/geo-ci:rust-1.58"
          - "georust/geo-ci:rust-1.59"
    container:
      image: ${{ matrix.container_image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - run: cargo check --all-targets
      - run: cargo test

  geo_fuzz:
    name: geo-fuzz
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    defaults:
      run:
        working-directory: geo/fuzz
    strategy:
      matrix:
        container_image:
          # Fuzz only on latest
          - "georust/geo-ci:rust-1.59"
    container:
      image: ${{ matrix.container_image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - run: cargo build --bins

  bench:
    name: bench
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    container:
      image: georust/geo-ci:rust-1.59
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - run: cargo bench --no-run
