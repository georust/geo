on:
  push:
    branches:
      - main
      - staging
      - trying
      - release/**
  pull_request:
  merge_group:
  schedule: [cron: "45 6 * * *"]

name: Run tests

jobs:
  # Set configurations used throughout the workflow
  set-matrix:
    name: Set matrix configuration
    runs-on: ubuntu-latest
    outputs:
      rust-versions: ${{ steps.set-matrix.outputs.rust-versions }}
      proj-version: ${{ steps.set-matrix.outputs.proj-version }}
    steps:
      - id: set-matrix
        run: |
          echo 'rust-versions=["1.85", "1.88", "1.89"]' >> $GITHUB_OUTPUT
          echo "proj-version=9.6.2" >> $GITHUB_OUTPUT

  # The `ci-result` job doesn't actually test anything - it just aggregates the
  # overall build status, otherwise the merge queue would need an entry
  # for each individual job produced by the job-matrix.
  #
  # ALL THE SUBSEQUENT JOBS NEED THEIR `name` ADDED TO THE `needs` SECTION OF both "ci result" JOBS!
  ci-success:
    name: ci result
    runs-on: ubuntu-latest
    needs:
      - lint
      - geo_types
      - geo
      - geo_traits
      - geo_fuzz
      - docs
    if: success()
    steps:
      - name: Mark the job as a success
        run: exit 0
  ci-failure:
    name: ci result
    runs-on: ubuntu-latest
    needs:
      - lint
      - geo_types
      - geo
      - geo_traits
      - geo_fuzz
    if: failure()
    steps:
      - name: Mark the job as a failure
        run: exit 1

  lint:
    name: lint
    needs: set-matrix
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    container:
      image: "ghcr.io/georust/geo-ci:proj-${{ needs.set-matrix.outputs.proj-version }}-rust-${{ fromJson(needs.set-matrix.outputs.rust-versions)[2] }}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - uses: Swatinem/rust-cache@v2
      - run: rustup component add rustfmt clippy
      - run: cargo fmt --all -- --check
      - run: cargo clippy --all-features --all-targets -- -Dwarnings

  geo_types:
    name: geo-types
    needs: set-matrix
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    defaults:
      run:
        working-directory: geo-types
    strategy:
      matrix:
        rust_version: ${{ fromJson(needs.set-matrix.outputs.rust-versions) }}
    container:
      image: "ghcr.io/georust/geo-ci:proj-${{ needs.set-matrix.outputs.proj-version }}-rust-${{ matrix.rust_version }}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - uses: Swatinem/rust-cache@v2
      - run: rustup target add thumbv7em-none-eabihf
      - run: cargo check --all-targets --no-default-features
      - run: cargo check --lib --target thumbv7em-none-eabihf --no-default-features -F use-rstar_0_9,serde
      - run: cargo test --all-features

  geo:
    name: geo
    needs: set-matrix
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    defaults:
      run:
        working-directory: geo
    strategy:
      matrix:
        rust_version: ${{ fromJson(needs.set-matrix.outputs.rust-versions) }}
    container:
      image: "ghcr.io/georust/geo-ci:proj-${{ needs.set-matrix.outputs.proj-version }}-rust-${{ matrix.rust_version }}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - uses: Swatinem/rust-cache@v2
      - run: cargo check --all-targets --no-default-features
      # we don't want to test `proj-network` because it only enables the `proj` feature
      - run: cargo test --features "use-proj use-serde earcutr multithreading"

  geo_traits:
    name: geo-traits
    needs: set-matrix
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    defaults:
      run:
        working-directory: geo-traits
    strategy:
      matrix:
        rust_version: ${{ fromJson(needs.set-matrix.outputs.rust-versions) }}
    container:
      image: "ghcr.io/georust/geo-ci:proj-${{ needs.set-matrix.outputs.proj-version }}-rust-${{ matrix.rust_version }}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - uses: Swatinem/rust-cache@v2
      - run: cargo check --all-targets
      - run: cargo test

  geo_fuzz:
    name: geo-fuzz
    needs: set-matrix
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    defaults:
      run:
        working-directory: geo/fuzz
    container:
      image: "ghcr.io/georust/geo-ci:proj-${{ needs.set-matrix.outputs.proj-version }}-rust-${{ fromJson(needs.set-matrix.outputs.rust-versions)[2] }}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - uses: Swatinem/rust-cache@v2
      - run: cargo build --bins

  docs:
    name: build documentation
    needs: set-matrix
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    container:
      image: "ghcr.io/georust/geo-ci:proj-${{ needs.set-matrix.outputs.proj-version }}-rust-${{ fromJson(needs.set-matrix.outputs.rust-versions)[2] }}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - uses: Swatinem/rust-cache@v2
      - run: RUSTDOCFLAGS="-D warnings" cargo doc --all-features --no-deps
